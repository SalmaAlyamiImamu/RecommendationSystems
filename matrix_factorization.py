# -*- coding: utf-8 -*-
"""Matrix Factorization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rIeg3g1_8I0HXnPiUvJLgUu4mXL6_pGe
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import re
from sklearn.decomposition import NMF
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Model

import warnings
warnings.filterwarnings('ignore')



import matplotlib.pyplot as plt
# %matplotlib inline

import pandas as pd
df = pd.read_csv('Final_Dataset.txt', index_col=0)

#the rating's values from 0 to 1 and as a result it is comparable with the binary case
#to unify the ratings in all models and make proper comparisons

df.rating.describe()

#create a movie_id column from the standardize_original_name, if I had the real movie id i can combine it with external APIs
#web scrabbing is good idea I kept it for future work
name_to_idx = {mid: idx for idx, mid in enumerate(df['standardize_original_name'].unique())}
df['movie_id'] = df['standardize_original_name'].map(name_to_idx)

df.head()

# sparsity
df.shape[0]/(len(df.user_id_maped.unique())*len(df.movie_id.unique()))

#train and test

train = df.sample(frac=0.8,random_state=5)
test = df.drop(train.index)

# make sure that the test set contains the user ids and the movie ids that exist in the train dataset
test = test.loc[test.movie_id.isin(train.movie_id.unique())]
test = test.loc[test.user_id_maped.isin(train.user_id_maped.unique())]
test.reset_index(drop=True, inplace=True)

# save the train and test dataset for the recommender systems
train.to_csv('train.csv', index=False)
test.to_csv('test.csv', index=False)
df.to_csv('df.csv', index= False)

#NMF using binary interaction
#if the user has watched the movie then 1 and 0 for opposite
Binary_Matrix = pd.pivot_table(train, values='rating', index='user_id_maped', columns='movie_id', aggfunc='count', fill_value=0)

Binary_Matrix.head()

#10 components are the topics
model_train = NMF(n_components=10, random_state=5)

model_train.fit(Binary_Matrix.values)
nmf_features_train = model_train.transform(Binary_Matrix.values)

matrix_mult_train = np.matmul(nmf_features_train, model_train.components_)

matrix_mult_train = pd.DataFrame(data=matrix_mult_train, index = Binary_Matrix.index, columns = Binary_Matrix.columns)

melt_train_predictions = matrix_mult_train.reset_index().melt(id_vars=['user_id_maped'])

actual_vs_predicted = pd.merge(melt_train_predictions, test[['user_id_maped', 'movie_id']], how='inner', on=['user_id_maped', 'movie_id'])
actual_vs_predicted['rating'] = 1
actual_vs_predicted

MSE = mean_squared_error(actual_vs_predicted.value, actual_vs_predicted.rating)
RMSE_Binary = np.sqrt(MSE)
MAE_Binary = mean_absolute_error(actual_vs_predicted.value, actual_vs_predicted.rating)

RMSE_Binary

MAE_Binary

#MFTVR




#MFTVR




#MFTVR

Rating_Matrix = pd.pivot_table(train, values='rating', index='user_id_maped', columns='movie_id', aggfunc='mean', fill_value=0)

Rating_Matrix

model_train = NMF(n_components=10, random_state=5)

model_train.fit(Rating_Matrix.values)

nmf_features_train = model_train.transform(Rating_Matrix.values)

matrix_mult_train = np.matmul(nmf_features_train, model_train.components_)

matrix_mult_train = pd.DataFrame(data=matrix_mult_train, index = Rating_Matrix.index, columns = Rating_Matrix.columns)

melt_train_predictions = matrix_mult_train.reset_index().melt(id_vars=['user_id_maped'])

actual_vs_predicted = pd.merge(melt_train_predictions, test[['user_id_maped', 'movie_id', 'rating']], how='inner', on=['user_id_maped', 'movie_id'])
actual_vs_predicted

MSE = mean_squared_error(actual_vs_predicted.value, actual_vs_predicted.rating)
RMSE_Rating = np.sqrt(MSE)
MAE_Rating = mean_absolute_error(actual_vs_predicted.value, actual_vs_predicted.rating)

RMSE_Rating

MAE_Rating